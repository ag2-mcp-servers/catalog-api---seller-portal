# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:52:54+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class FieldMetadata(BaseModel):
    from_: int = Field(
        ...,
        alias='from',
        description='The first page of the interval of the brand list.',
        examples=[1],
        title='from',
    )
    orderBy: str = Field(
        ...,
        description='The order that the list is displayed. You can select `name`, or `updated_at` to select the order criteria. Then you can add `,` , `asc` or `desc` to define the brands order.',
        examples=['name,desc'],
        title='orderBy',
    )
    to: int = Field(
        ...,
        description='The last page of the interval of the brand list.',
        examples=[10],
        title='to',
    )
    total: int = Field(
        ..., description='Total of brands on the list.', examples=[1399], title='total'
    )


class Datum(BaseModel):
    createdAt: str = Field(
        ...,
        description='Date when the brand was created.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='createdAt',
    )
    id: str = Field(
        ..., description='Brand unique identifier number.', examples=['863'], title='id'
    )
    isActive: bool = Field(
        ...,
        description='The condition defines if the brand is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    name: str = Field(
        ..., description='Brand Name.', examples=['Zwilling'], title='name'
    )
    updatedAt: str = Field(
        ...,
        description='Last date when the brand was updated.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='updatedAt',
    )


class ApiCatalogSellerPortalBrandsGetResponse(BaseModel):
    field_metadata: FieldMetadata = Field(
        ...,
        alias='_metadata',
        description='Information about the organization and exhibition of the brand list.',
        examples=[{'from': 1, 'orderBy': 'name,desc', 'to': 10, 'total': 1399}],
        title='_metadata',
    )
    data: List[Datum] = Field(
        ..., description="List with information about the store's brands.", title='data'
    )


class ApiCatalogSellerPortalBrandsPostRequest(BaseModel):
    isActive: bool = Field(
        ...,
        description='The condition defines if the brand is active (`true`) or inactive (`false`).',
        examples=[True],
        title='isActive',
    )
    name: str = Field(
        ..., description='Brand Name.', examples=['Zwilling'], title='name'
    )


class ApiCatalogSellerPortalBrandsPostResponse(BaseModel):
    createdAt: Optional[str] = Field(
        None,
        description='Date when the brand was created.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='createdAt',
    )
    id: Optional[str] = Field(
        None,
        description='Brand unique identifier number.',
        examples=['863'],
        title='id',
    )
    isActive: Optional[bool] = Field(
        None,
        description='The condition defines if the brand is active (`true`) or inactive (`false`).',
        examples=[True],
        title='isActive',
    )
    name: Optional[str] = Field(
        None, description='Brand Name.', examples=['Zwilling'], title='name'
    )
    updatedAt: Optional[str] = Field(
        None,
        description='Last date when the brand was updated.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='updatedAt',
    )


class ApiCatalogSellerPortalBrandsBrandIdGetResponse(BaseModel):
    createdAt: Optional[str] = Field(
        None,
        description='Date when the brand was created.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='createdAt',
    )
    id: Optional[str] = Field(
        None,
        description='Brand unique identifier number.',
        examples=['863'],
        title='id',
    )
    isActive: Optional[bool] = Field(
        None,
        description='The condition defines if the brand is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    name: Optional[str] = Field(
        None, description='Brand Name.', examples=['Zwilling'], title='name'
    )
    updatedAt: Optional[str] = Field(
        None,
        description='Last date when the brand was updated.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='updatedAt',
    )


class ApiCatalogSellerPortalBrandsBrandIdPutRequest(BaseModel):
    id: str = Field(
        ..., description='Brand unique identifier number.', examples=['20'], title='id'
    )
    isActive: bool = Field(
        ...,
        description='The condition defines if the brand is active (`true`) or inactive (`false`).',
        examples=[True],
        title='isActive',
    )
    name: str = Field(
        ..., description='Brand Name.', examples=['Zwilling'], title='name'
    )


class Value(BaseModel):
    id: str = Field(
        ..., description='Children category unique identifier number.', title='id'
    )
    isActive: bool = Field(
        ...,
        description='The condition defines if the children category is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    name: str = Field(
        ..., description='Children category Name.', examples=['Perfumes'], title='name'
    )


class Child(BaseModel):
    value: Value = Field(
        ...,
        description='Object with values of a children category.',
        examples=[{'id': '2', 'isActive': False, 'name': 'Perfumes'}],
        title='value',
    )


class Value1(BaseModel):
    id: str = Field(
        ...,
        description='Category unique identifier number.',
        examples=['1'],
        title='id',
    )
    isActive: bool = Field(
        ...,
        description='The condition defines if the category is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    name: str = Field(
        ..., description='Category Name.', examples=['sandboxintegracao'], title='name'
    )


class Root(BaseModel):
    children: List[Child] = Field(
        ...,
        description='List of all children categories of the parent category.',
        examples=[[{'value': {'id': '2', 'isActive': False, 'name': 'Perfumes'}}]],
        title='children',
    )
    value: Value1 = Field(
        ...,
        description='Object with values of a category.',
        examples=[{'id': '1', 'isActive': False, 'name': 'sandboxintegracao'}],
        title='value',
    )


class ApiCatalogSellerPortalCategoryTreeGetResponse(BaseModel):
    createdAt: Optional[str] = Field(
        None,
        description='Date when the category tree was created.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='createdAt',
    )
    roots: List[Root] = Field(
        ...,
        description='List of all categories of the store.',
        examples=[
            [
                {
                    'children': [
                        {'value': {'id': '2', 'isActive': False, 'name': 'Perfumes'}}
                    ],
                    'value': {
                        'id': '1',
                        'isActive': False,
                        'name': 'sandboxintegracao',
                    },
                }
            ]
        ],
        title='roots',
    )
    updatedAt: Optional[str] = Field(
        None,
        description='Last date when the category tree was updated.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='updatedAt',
    )


class Value2(BaseModel):
    id: str = Field(
        ..., description='Children category unique identifier number.', title='id'
    )
    isActive: bool = Field(
        ...,
        description='The condition defines if the children category is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    name: str = Field(
        ..., description='Children category Name.', examples=['Perfumes'], title='name'
    )


class Child1(BaseModel):
    value: Value2 = Field(
        ...,
        description='Object with values of a children category.',
        examples=[{'id': '2', 'isActive': False, 'name': 'Perfumes'}],
        title='value',
    )


class Value3(BaseModel):
    id: str = Field(
        ...,
        description='Category unique identifier number.',
        examples=['1'],
        title='id',
    )
    isActive: bool = Field(
        ...,
        description='The condition defines if the category is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    name: str = Field(
        ..., description='Category Name.', examples=['sandboxintegracao'], title='name'
    )


class Root1(BaseModel):
    children: List[Child1] = Field(
        ...,
        description='List of all children categories of the parent category.',
        examples=[[{'value': {'id': '2', 'isActive': False, 'name': 'Perfumes'}}]],
        title='children',
    )
    value: Value3 = Field(
        ...,
        description='Object with values of a category.',
        examples=[{'id': '1', 'isActive': False, 'name': 'sandboxintegracao'}],
        title='value',
    )


class ApiCatalogSellerPortalCategoryTreePutRequest(BaseModel):
    roots: List[Root1] = Field(
        ...,
        description='List of all categories of the store.',
        examples=[
            [
                {
                    'children': [
                        {'value': {'id': '2', 'isActive': False, 'name': 'Perfumes'}}
                    ],
                    'value': {
                        'id': '1',
                        'isActive': False,
                        'name': 'sandboxintegracao',
                    },
                }
            ]
        ],
        title='roots',
    )


class ApiCatalogSellerPortalCategoryTreeCategoriesPostRequest(BaseModel):
    Name: str = Field(
        ..., description='Category name.', examples=['Beauty'], title='Name'
    )
    parentId: str = Field(
        ...,
        description='Parent category unique identifier number.',
        examples=['567'],
        title='parentId',
    )


class Value4(BaseModel):
    id: str = Field(
        ..., description='Children category unique identifier number.', title='id'
    )
    isActive: bool = Field(
        ...,
        description='The condition defines if the children category is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    name: str = Field(
        ..., description='Children category Name.', examples=['Perfumes'], title='name'
    )


class Child2(BaseModel):
    value: Value4 = Field(
        ...,
        description='Object with values of a children category.',
        examples=[{'id': '2', 'isActive': False, 'name': 'Perfumes'}],
        title='value',
    )


class Value5(BaseModel):
    id: str = Field(
        ...,
        description='Category unique identifier number.',
        examples=['1'],
        title='id',
    )
    isActive: bool = Field(
        ...,
        description='The condition defines if the category is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    name: str = Field(
        ..., description='Category Name.', examples=['sandboxintegracao'], title='name'
    )


class ApiCatalogSellerPortalCategoryTreeCategoriesPostResponse(BaseModel):
    children: List[Child2] = Field(
        ...,
        description='List of all children categories of the parent category.',
        examples=[[{'value': {'id': '2', 'isActive': False, 'name': 'Perfumes'}}]],
        title='children',
    )
    value: Value5 = Field(
        ...,
        description='Object with values of a category.',
        examples=[{'id': '1', 'isActive': False, 'name': 'sandboxintegracao'}],
        title='value',
    )


class Value6(BaseModel):
    id: str = Field(
        ...,
        description='Children category unique identifier number.',
        examples=['234'],
        title='id',
    )
    isActive: bool = Field(
        ...,
        description='The condition defines if the children category is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    name: str = Field(
        ..., description='Children category Name.', examples=['Perfumes'], title='name'
    )


class Child3(BaseModel):
    value: Value6 = Field(
        ...,
        description='Object with values of a children category.',
        examples=[{'id': '2', 'isActive': False, 'name': 'Perfumes'}],
        title='value',
    )


class Value7(BaseModel):
    id: str = Field(
        ...,
        description='Category unique identifier number.',
        examples=['1'],
        title='id',
    )
    isActive: bool = Field(
        ...,
        description='The condition defines if the category is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    name: str = Field(
        ..., description='Category Name.', examples=['sandboxintegracao'], title='name'
    )


class ApiCatalogSellerPortalCategoryTreeCategoriesCategoryIdGetResponse(BaseModel):
    children: List[Child3] = Field(
        ...,
        description='List of all children categories of the parent category.',
        examples=[[{'value': {'id': '2', 'isActive': False, 'name': 'Perfumes'}}]],
        title='children',
    )
    value: Value7 = Field(
        ...,
        description='Object with values of a category.',
        examples=[{'id': '1', 'isActive': False, 'name': 'sandboxintegracao'}],
        title='value',
    )


class Attribute(BaseModel):
    name: str = Field(
        ..., description='Attribute name.', examples=['Fabric'], title='name'
    )
    value: str = Field(
        ..., description='Attribute value.', examples=['Cotton'], title='value'
    )


class Image(BaseModel):
    alt: Optional[str] = Field(
        None,
        description='Image alternative description.',
        examples=['imagem'],
        title='alt',
    )
    id: str = Field(
        ..., description='Image ID.', examples=['vtex_logo.jpg'], title='id'
    )
    url: str = Field(
        ...,
        description='Image URL, which must be in the following format: `https://{accountName}.vtexassets.com/assets/{path}`, saved using the [Catalog Images app](https://developers.vtex.com/vtex-developer-docs/docs/vtex-catalog-images).',
        examples=[
            'https://mystore.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg'
        ],
        title='url',
    )


class Dimensions(BaseModel):
    height: float = Field(
        ..., description='SKU height.', examples=[2.1], title='height'
    )
    length: float = Field(
        ..., description='SKU length.', examples=[1.6], title='length'
    )
    width: float = Field(..., description='SKU width.', examples=[1.5], title='width')


class Spec(BaseModel):
    name: str = Field(
        ..., description="SKU's specification name.", examples=['Color'], title='name'
    )
    value: str = Field(
        ...,
        description="SKU's specification values.",
        examples=['Black'],
        title='value',
    )


class Sku(BaseModel):
    dimensions: Dimensions = Field(
        ...,
        description='SKU dimensions.',
        examples=[{'height': 2.1, 'length': 1.6, 'width': 1.5}],
        title='dimensions',
    )
    ean: Optional[str] = Field(
        None,
        description='Unique SKU identification code (barcode), composed of up to 13 numeric characters.',
        examples=['978-1909621862'],
        title='ean',
    )
    externalId: Optional[str] = Field(
        None,
        description="Unique reference code created to improve the store's organization. This is not a required field.",
        examples=['1909621862'],
        title='externalId',
    )
    images: List = Field(
        ...,
        description="SKU's images IDs.",
        examples=[['vtex_logo.jpg']],
        title='images',
    )
    isActive: bool = Field(
        ...,
        description='If the SKU is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    manufacturerCode: Optional[str] = Field(
        None,
        description='SKU reference code in the store.',
        examples=['1234567'],
        title='code',
    )
    name: str = Field(
        ...,
        description='SKU Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.',
        examples=['VTEX Shirt Black Size S'],
        title='name',
    )
    specs: List[Spec] = Field(
        ...,
        description='SKU specifications. This field is mandatory, but nullable if there is only one SKU.',
        examples=[
            [{'name': 'Color', 'value': 'Black'}, {'name': 'Size', 'value': 'S'}]
        ],
        title='specs',
    )
    weight: int = Field(..., description='SKU weight.', examples=[300], title='weight')


class Spec1(BaseModel):
    name: str = Field(
        ..., description='Specification name.', examples=['Color'], title='name'
    )
    values: List[str] = Field(
        ...,
        description='Specification values.',
        examples=[['Black', 'White']],
        title='values',
    )


class ApiCatalogSellerPortalProductsPostRequest(BaseModel):
    attributes: List[Attribute] = Field(
        ...,
        description='Attributes of the product. Attributes are additional properties used to create site browsing filters.',
        examples=[
            [
                {'name': 'Fabric', 'value': 'Cotton'},
                {'name': 'Gender', 'value': 'Feminine'},
            ]
        ],
        title='attributes',
    )
    brandId: str = Field(
        ...,
        description="Product's Brand unique identifier number.",
        examples=['1'],
        title='brandId',
    )
    categoryIds: List[str] = Field(
        ...,
        description="Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.",
        examples=[['732']],
        title='categoryIds',
    )
    description: Optional[str] = Field(
        None,
        description='Description of the primary information related to the product. A simple and easy-to-understand summary for the customer.',
        examples=['Descrição camiseta VTEX'],
        title='description',
    )
    externalId: Optional[str] = Field(
        None,
        description='Product reference unique identifier number in the store.',
        examples=['sandboxintegracao-310117347'],
        title='externalId',
    )
    images: List[Image] = Field(
        ...,
        description='Information of the images of the product.',
        examples=[
            [
                {
                    'alt': 'imagem',
                    'id': 'vtex_logo.jpg',
                    'url': 'https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg',
                }
            ]
        ],
        title='images',
    )
    name: str = Field(
        ...,
        description='Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.',
        examples=['VTEX Shirt'],
        title='name',
    )
    origin: str = Field(
        ...,
        description='Origin account of the product. It is not possible to alter products where the origin is `marketplace`.',
        examples=['vtxleo7778'],
        title='origin',
    )
    skus: List[Sku] = Field(
        ...,
        description='SKUs of the product.',
        examples=[
            [
                {
                    'dimensions': {'height': 2.1, 'length': 1.6, 'width': 1.5},
                    'ean': '978-1909621862',
                    'externalId': '1909621862',
                    'images': [
                        'https://mystore.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg'
                    ],
                    'isActive': True,
                    'manufacturerCode': '1234567',
                    'name': 'VTEX Shirt Black Size S',
                    'specs': [
                        {'name': 'Color', 'value': 'Black'},
                        {'name': 'Size', 'value': 'S'},
                    ],
                    'weight': 300,
                },
                {
                    'dimensions': {'height': 2.1, 'length': 1.6, 'width': 1.5},
                    'ean': '978-1909621862',
                    'externalId': '1909621862',
                    'images': ['vtex_logo.jpg'],
                    'isActive': True,
                    'manufacturerCode': '1234568',
                    'name': 'VTEX Shirt White Size L',
                    'specs': [
                        {'name': 'Color', 'value': 'White'},
                        {'name': 'Size', 'value': 'L'},
                    ],
                    'weight': 300,
                },
            ]
        ],
        title='skus',
    )
    slug: str = Field(
        ...,
        description='Reference of the product in the URL of the store.',
        examples=['/vtex-shirt'],
        title='slug',
    )
    specs: List[Spec1] = Field(
        ...,
        description='Specifications that will differentiate the possible product SKUs.',
        examples=[
            [
                {'name': 'Color', 'values': ['Black', 'White']},
                {'name': 'Size', 'values': ['S', 'M', 'L']},
            ]
        ],
        title='specs',
    )
    status: str = Field(
        ...,
        description='Status of the product. Its values can be `active` or `inactive`.',
        examples=['active'],
        title='status',
    )
    taxCode: Optional[str] = Field(
        None, description='Product tax code.', examples=['123'], title='taxCode'
    )
    transportModal: Optional[str] = Field(
        None,
        description='Transport modal of the product.',
        examples=['1'],
        title='transportModal',
    )


class Spec2(BaseModel):
    name: str = Field(
        ..., description="SKU's specification name.", examples=['Color'], title='name'
    )
    value: str = Field(
        ...,
        description="SKU's specification values.",
        examples=['Black'],
        title='value',
    )


class Sku1(BaseModel):
    dimensions: Dimensions = Field(
        ...,
        description='SKU dimensions.',
        examples=[{'height': 2.1, 'length': 1.6, 'width': 1.5}],
        title='dimensions',
    )
    ean: Optional[str] = Field(
        None,
        description='Unique SKU identification code (barcode), composed of up to 13 numeric characters.',
        examples=['978-1909621862'],
        title='ean',
    )
    externalId: Optional[str] = Field(
        None,
        description="Unique reference code created to improve the store's organization. This is not a required field.",
        examples=['1909621862'],
        title='externalId',
    )
    id: str = Field(
        ...,
        description='SKU unique identifier number.',
        examples=['182907'],
        title='id',
    )
    images: List = Field(
        ...,
        description="SKU's images IDs.",
        examples=[['vtex_logo.jpg']],
        title='images',
    )
    isActive: bool = Field(
        ...,
        description='If the SKU is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    manufacturerCode: Optional[str] = Field(
        None,
        description='SKU reference code in the store.',
        examples=['1234567'],
        title='code',
    )
    name: Optional[str] = Field(
        None,
        description='SKU Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.',
        examples=['VTEX Shirt Black Size S'],
        title='name',
    )
    specs: List[Spec2] = Field(
        ...,
        description='SKU specifications. This field is mandatory, but nullable if there is only one SKU.',
        examples=[
            [{'name': 'Color', 'value': 'Black'}, {'name': 'Size', 'value': 'S'}]
        ],
        title='specs',
    )
    weight: int = Field(..., description='SKU weight.', examples=[300], title='weight')


class Spec3(BaseModel):
    name: str = Field(
        ..., description='Specification name.', examples=['Color'], title='name'
    )
    values: List[str] = Field(
        ...,
        description='Specification values.',
        examples=[['Black', 'White']],
        title='values',
    )


class ApiCatalogSellerPortalProductsPostResponse(BaseModel):
    attributes: List[Attribute] = Field(
        ...,
        description='Attributes of the product. Attributes are additional properties used to create site browsing filters.',
        examples=[
            [
                {'name': 'Fabric', 'value': 'Cotton'},
                {'name': 'Gender', 'value': 'Feminine'},
            ]
        ],
        title='attributes',
    )
    brandId: str = Field(
        ...,
        description="Product's Brand unique identifier number.",
        examples=['1'],
        title='brandId',
    )
    brandName: str = Field(
        ...,
        description='Name of the Brand associated with the product.',
        examples=['AOC'],
        title='brandName',
    )
    categoryIds: List[str] = Field(
        ...,
        description="Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.",
        examples=[['732']],
        title='categoryIds',
    )
    categoryNames: List[str] = Field(
        ...,
        description="Names of the product's categories, displayed in a path format.",
        examples=[['/Men/Acessories/']],
        title='categoryNames',
    )
    createdAt: str = Field(
        ...,
        description='Date when the product was created.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='createdAt',
    )
    externalId: Optional[str] = Field(
        None,
        description='Product reference unique identifier number in the store.',
        examples=['sandboxintegracao-310117347'],
        title='externalId',
    )
    id: Optional[str] = Field(
        None,
        description="Product's unique identifier number.",
        examples=['189371'],
        title='id',
    )
    images: List[Image] = Field(
        ...,
        description='Information of the images of the product.',
        examples=[
            [
                {
                    'alt': 'imagem',
                    'id': 'vtex_logo.jpg',
                    'url': 'https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg',
                }
            ]
        ],
        title='images',
    )
    name: str = Field(
        ...,
        description='Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.',
        examples=['VTEX 10 Shirt'],
        title='name',
    )
    origin: str = Field(
        ...,
        description='Origin account of the product. It is not possible to alter products where the origin is `marketplace`.',
        examples=['vtxleo7778'],
        title='origin',
    )
    skus: List[Sku1] = Field(
        ...,
        description='SKUs of the product.',
        examples=[
            [
                {
                    'dimensions': {'height': 2.1, 'length': 1.6, 'width': 1.5},
                    'ean': '978-1909621862',
                    'externalId': '1909621862',
                    'id': '182907',
                    'images': ['vtex_logo.jpg'],
                    'isActive': True,
                    'manufacturerCode': '1234567',
                    'name': 'VTEX Shirt Black Size S',
                    'specs': [
                        {'name': 'Color', 'value': 'Black'},
                        {'name': 'Size', 'value': 'S'},
                    ],
                    'weight': 300,
                },
                {
                    'dimensions': {'height': 2.1, 'length': 1.6, 'width': 1.5},
                    'ean': '978-1909621862',
                    'externalId': '1909621862',
                    'id': '182908',
                    'images': ['vtex_logo.jpg'],
                    'isActive': True,
                    'manufacturerCode': '1234568',
                    'name': 'VTEX Shirt White Size L',
                    'specs': [
                        {'name': 'Color', 'value': 'White'},
                        {'name': 'Size', 'value': 'L'},
                    ],
                    'weight': 300,
                },
            ]
        ],
        title='skus',
    )
    slug: str = Field(
        ...,
        description='Reference of the product in the URL of the store.',
        examples=['/vtex-shirt'],
        title='slug',
    )
    specs: List[Spec3] = Field(
        ...,
        description='Specifications that will differentiate the possible product SKUs.',
        examples=[
            [
                {'name': 'Color', 'values': ['Black', 'White']},
                {'name': 'Size', 'values': ['S', 'M', 'L']},
            ]
        ],
        title='specs',
    )
    status: str = Field(
        ...,
        description='Status of the product. Its values can be `active` or `inactive`.',
        examples=['active'],
        title='status',
    )
    taxCode: Optional[str] = Field(
        None, description='Product tax code.', examples=['123'], title='taxCode'
    )
    transportModal: Optional[str] = Field(
        None,
        description='Transport modal of the product.',
        examples=['1'],
        title='transportModal',
    )
    updatedAt: str = Field(
        ...,
        description='Last date when the product was updated.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='updatedAt',
    )


class Spec4(BaseModel):
    name: str = Field(
        ..., description="SKU's specification name.", examples=['Color'], title='name'
    )
    value: str = Field(
        ...,
        description="SKU's specification values.",
        examples=['Black'],
        title='value',
    )


class Sku2(BaseModel):
    dimensions: Dimensions = Field(
        ...,
        description='SKU dimensions.',
        examples=[{'height': 2.1, 'length': 1.6, 'width': 1.5}],
        title='dimensions',
    )
    ean: Optional[str] = Field(
        None,
        description='Unique SKU identification code (barcode), composed of up to 13 numeric characters.',
        examples=['978-1909621862'],
        title='ean',
    )
    externalId: Optional[str] = Field(
        None,
        description="Unique reference code created to improve the store's organization. This is not a required field.",
        examples=['1909621862'],
        title='externalId',
    )
    id: str = Field(
        ...,
        description='SKU unique identifier number.',
        examples=['182907'],
        title='id',
    )
    images: List = Field(
        ...,
        description="SKU's images IDs.",
        examples=[['vtex_logo.jpg']],
        title='images',
    )
    isActive: bool = Field(
        ...,
        description='If the SKU is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    manufacturerCode: Optional[str] = Field(
        None,
        description='SKU reference code in the store.',
        examples=['1234567'],
        title='code',
    )
    specs: List[Spec4] = Field(
        ...,
        description='SKU specifications. This field is mandatory, but nullable if there is only one SKU.',
        examples=[
            [{'name': 'Color', 'value': 'Black'}, {'name': 'Size', 'value': 'S'}]
        ],
        title='specs',
    )
    weight: int = Field(..., description='SKU weight.', examples=[300], title='weight')


class Spec5(BaseModel):
    name: str = Field(
        ..., description='Specification name.', examples=['Color'], title='name'
    )
    values: List[str] = Field(
        ...,
        description='Specification values.',
        examples=[['Black', 'White']],
        title='values',
    )


class ApiCatalogSellerPortalProductsParamGetResponse(BaseModel):
    attributes: List[Attribute] = Field(
        ...,
        description='Attributes of the product. Attributes are additional properties used to create site browsing filters.',
        examples=[
            [
                {'name': 'Fabric', 'value': 'Cotton'},
                {'name': 'Gender', 'value': 'Feminine'},
            ]
        ],
        title='attributes',
    )
    brandId: str = Field(
        ...,
        description="Product's Brand unique identifier number.",
        examples=['1'],
        title='brandId',
    )
    brandName: str = Field(
        ...,
        description='Name of the Brand associated with the product.',
        examples=['AOC'],
        title='brandName',
    )
    categoryIds: List[str] = Field(
        ...,
        description="Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.",
        examples=[['732']],
        title='categoryIds',
    )
    categoryNames: List[str] = Field(
        ...,
        description="Names of the product's categories, displayed in a path format.",
        examples=[['/Men/Acessories/']],
        title='categoryNames',
    )
    createdAt: str = Field(
        ...,
        description='Date when the product was created.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='createdAt',
    )
    externalId: Optional[str] = Field(
        None,
        description='Product reference unique identifier number in the store.',
        examples=['sandboxintegracao-310117347'],
        title='externalId',
    )
    id: Optional[str] = Field(
        None,
        description="Product's unique identifier number.",
        examples=['189371'],
        title='id',
    )
    images: List[Image] = Field(
        ...,
        description='Information of the images of the product.',
        examples=[
            [
                {
                    'alt': 'imagem',
                    'id': 'vtex_logo.jpg',
                    'url': 'https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg',
                }
            ]
        ],
        title='images',
    )
    name: str = Field(
        ...,
        description='Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.',
        examples=['Camiseta VTEX 10'],
        title='name',
    )
    origin: str = Field(
        ...,
        description='Origin account of the product. It is not possible to alter products where the origin is `marketplace`.',
        examples=['vtxleo7778'],
        title='origin',
    )
    skus: List[Sku2] = Field(
        ...,
        description='SKUs of the product.',
        examples=[
            [
                {
                    'dimensions': {'height': 2.1, 'length': 1.6, 'width': 1.5},
                    'ean': '978-1909621862',
                    'externalId': '1909621862',
                    'id': '182907',
                    'images': ['vtex_logo.jpg'],
                    'isActive': True,
                    'manufacturerCode': '1234567',
                    'specs': [
                        {'name': 'Color', 'value': 'Black'},
                        {'name': 'Size', 'value': 'S'},
                    ],
                    'weight': 300,
                },
                {
                    'dimensions': {'height': 2.1, 'length': 1.6, 'width': 1.5},
                    'ean': '978-1909621862',
                    'externalId': '1909621862',
                    'id': '182908',
                    'images': ['vtex_logo.jpg'],
                    'isActive': True,
                    'manufacturerCode': '1234568',
                    'specs': [
                        {'name': 'Color', 'value': 'White'},
                        {'name': 'Size', 'value': 'L'},
                    ],
                    'weight': 300,
                },
            ]
        ],
        title='skus',
    )
    slug: str = Field(
        ...,
        description='Reference of the product in the URL of the store.',
        examples=['/vtex-shirt'],
        title='slug',
    )
    specs: List[Spec5] = Field(
        ...,
        description='Specifications that will differentiate the possible product SKUs.',
        examples=[
            [
                {'name': 'Color', 'values': ['Black', 'White']},
                {'name': 'Size', 'values': ['S', 'M', 'L']},
            ]
        ],
        title='specs',
    )
    status: str = Field(
        ...,
        description='Status of the product. Its values can be `active` or `inactive`.',
        examples=['active'],
        title='status',
    )
    taxCode: Optional[str] = Field(
        None, description='Product tax code.', examples=['123'], title='taxCode'
    )
    transportModal: Optional[str] = Field(
        None,
        description='Transport modal of the product.',
        examples=['1'],
        title='transportModal',
    )
    updatedAt: str = Field(
        ...,
        description='Last date when the product was updated.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='updatedAt',
    )


class Spec6(BaseModel):
    name: str = Field(
        ..., description="SKU's specification name.", examples=['Color'], title='name'
    )
    value: str = Field(
        ...,
        description="SKU's specification values.",
        examples=['Black'],
        title='value',
    )


class Sku3(BaseModel):
    dimensions: Dimensions = Field(
        ...,
        description='SKU dimensions.',
        examples=[{'height': 2.1, 'length': 1.6, 'width': 1.5}],
        title='dimensions',
    )
    ean: Optional[str] = Field(
        None,
        description='Unique SKU identification code (barcode), composed of up to 13 numeric characters.',
        examples=['978-1909621862'],
        title='ean',
    )
    externalId: Optional[str] = Field(
        None,
        description="Unique reference code created to improve the store's organization. This is not a required field.",
        examples=['1909621862'],
        title='externalId',
    )
    id: str = Field(
        ...,
        description='SKU unique identifier number.',
        examples=['182907'],
        title='id',
    )
    images: List = Field(
        ...,
        description="SKU's images IDs.",
        examples=[['vtex_logo.jpg']],
        title='images',
    )
    isActive: bool = Field(
        ...,
        description='If the SKU is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    manufacturerCode: Optional[str] = Field(
        None,
        description='SKU reference code in the store.',
        examples=['1234567'],
        title='code',
    )
    specs: List[Spec6] = Field(
        ...,
        description='SKU specifications. This field is mandatory, but nullable if there is only one SKU.',
        examples=[
            [{'name': 'Color', 'value': 'Black'}, {'name': 'Size', 'value': 'S'}]
        ],
        title='specs',
    )
    weight: int = Field(..., description='SKU weight.', examples=[300], title='weight')


class Spec7(BaseModel):
    name: str = Field(
        ..., description='Specification name.', examples=['Color'], title='name'
    )
    values: List[str] = Field(
        ...,
        description='Specification values.',
        examples=[['Black', 'White']],
        title='values',
    )


class ApiCatalogSellerPortalProductsProductIdGetResponse(BaseModel):
    attributes: List[Attribute] = Field(
        ...,
        description='Attributes of the product. Attributes are additional properties used to create site browsing filters.',
        examples=[
            [
                {'name': 'Fabric', 'value': 'Cotton'},
                {'name': 'Gender', 'value': 'Feminine'},
            ]
        ],
        title='attributes',
    )
    brandId: str = Field(
        ...,
        description="Product's Brand unique identifier number.",
        examples=['1'],
        title='brandId',
    )
    brandName: str = Field(
        ...,
        description='Name of the Brand associated with the product.',
        examples=['AOC'],
        title='brandName',
    )
    categoryIds: List[str] = Field(
        ...,
        description="Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.",
        examples=[['732']],
        title='categoryIds',
    )
    categoryNames: List[str] = Field(
        ...,
        description="Names of the product's categories, displayed in a path format.",
        examples=[['/Men/Acessories/']],
        title='categoryNames',
    )
    createdAt: str = Field(
        ...,
        description='Date when the product was created.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='createdAt',
    )
    externalId: Optional[str] = Field(
        None,
        description='Product reference unique identifier number in the store.',
        examples=['sandboxintegracao-310117347'],
        title='externalId',
    )
    id: Optional[str] = Field(
        None,
        description="Product's unique identifier number.",
        examples=['189371'],
        title='id',
    )
    images: List[Image] = Field(
        ...,
        description='Information of the images of the product.',
        examples=[
            [
                {
                    'alt': 'imagem',
                    'id': 'vtex_logo.jpg',
                    'url': 'https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg',
                }
            ]
        ],
        title='images',
    )
    name: str = Field(
        ...,
        description='Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.',
        examples=['Camiseta VTEX 10'],
        title='name',
    )
    origin: str = Field(
        ...,
        description='Origin account of the product. It is not possible to alter products where the origin is `marketplace`.',
        examples=['vtxleo7778'],
        title='origin',
    )
    skus: List[Sku3] = Field(
        ...,
        description='SKUs of the product.',
        examples=[
            [
                {
                    'dimensions': {'height': 2.1, 'length': 1.6, 'width': 1.5},
                    'ean': '978-1909621862',
                    'externalId': '1909621862',
                    'id': '182907',
                    'images': ['vtex_logo.jpg'],
                    'isActive': True,
                    'manufacturerCode': '1234567',
                    'specs': [
                        {'name': 'Color', 'value': 'Black'},
                        {'name': 'Size', 'value': 'S'},
                    ],
                    'weight': 300,
                },
                {
                    'dimensions': {'height': 2.1, 'length': 1.6, 'width': 1.5},
                    'ean': '978-1909621862',
                    'externalId': '1909621862',
                    'id': '182908',
                    'images': ['vtex_logo.jpg'],
                    'isActive': True,
                    'manufacturerCode': '1234568',
                    'specs': [
                        {'name': 'Color', 'value': 'White'},
                        {'name': 'Size', 'value': 'L'},
                    ],
                    'weight': 300,
                },
            ]
        ],
        title='skus',
    )
    slug: str = Field(
        ...,
        description='Reference of the product in the URL of the store.',
        examples=['/vtex-shirt'],
        title='slug',
    )
    specs: List[Spec7] = Field(
        ...,
        description='Specifications that will differentiate the possible product SKUs.',
        examples=[
            [
                {'name': 'Color', 'values': ['Black', 'White']},
                {'name': 'Size', 'values': ['S', 'M', 'L']},
            ]
        ],
        title='specs',
    )
    status: str = Field(
        ...,
        description='Status of the product. Its values can be `active` or `inactive`.',
        examples=['active'],
        title='status',
    )
    taxCode: Optional[str] = Field(
        None, description='Product tax code.', examples=['123'], title='taxCode'
    )
    transportModal: Optional[str] = Field(
        None,
        description='Transport modal of the product.',
        examples=['1'],
        title='transportModal',
    )
    updatedAt: str = Field(
        ...,
        description='Last date when the product was updated.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='updatedAt',
    )


class Spec8(BaseModel):
    name: str = Field(
        ..., description="SKU's specification name.", examples=['Color'], title='name'
    )
    value: str = Field(
        ...,
        description="SKU's specification values.",
        examples=['Black'],
        title='value',
    )


class Sku4(BaseModel):
    dimensions: Dimensions = Field(
        ...,
        description='SKU dimensions.',
        examples=[{'height': 2.1, 'length': 1.6, 'width': 1.5}],
        title='dimensions',
    )
    ean: Optional[str] = Field(
        None,
        description='Unique SKU identification code (barcode), composed of up to 13 numeric characters.',
        examples=['978-1909621862'],
        title='ean',
    )
    externalId: Optional[str] = Field(
        None,
        description="Unique reference code created to improve the store's organization. This is not a required field.",
        examples=['1909621862'],
        title='externalId',
    )
    id: Optional[str] = Field(
        None,
        description='SKU unique identifier number. Do not include this field when adding a new SKU, only when editing existing SKUs.',
        examples=['182907'],
        title='id',
    )
    images: List = Field(
        ...,
        description="SKU's images IDs.",
        examples=[['vtex_logo.jpg']],
        title='images',
    )
    isActive: bool = Field(
        ...,
        description='Defines if the SKU is active (`true`) or inactive (`false`).',
        examples=[False],
        title='isActive',
    )
    manufacturerCode: Optional[str] = Field(
        None,
        description='SKU reference code in the store.',
        examples=['1234567'],
        title='code',
    )
    name: Optional[str] = Field(
        None,
        description='SKU Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.',
        examples=['VTEX Shirt Black Size S'],
        title='name',
    )
    specs: List[Spec8] = Field(
        ...,
        description='SKU specifications. This field is mandatory, but nullable if there is only one SKU.',
        examples=[
            [{'name': 'Color', 'value': 'Black'}, {'name': 'Size', 'value': 'S'}]
        ],
        title='specs',
    )
    weight: int = Field(..., description='SKU weight.', examples=[300], title='weight')


class Spec9(BaseModel):
    name: str = Field(
        ..., description='Specification name.', examples=['Color'], title='name'
    )
    values: List[str] = Field(
        ...,
        description='Specification values.',
        examples=[['Black', 'White']],
        title='values',
    )


class ApiCatalogSellerPortalProductsProductIdPutRequest(BaseModel):
    attributes: List[Attribute] = Field(
        ...,
        description='Attributes of the product. Attributes are additional properties used to create site browsing filters.',
        examples=[
            [
                {'name': 'Fabric', 'value': 'Cotton'},
                {'name': 'Gender', 'value': 'Feminine'},
            ]
        ],
        title='attributes',
    )
    brandId: str = Field(
        ...,
        description="Product's Brand unique identifier number.",
        examples=['1'],
        title='brandId',
    )
    categoryIds: List[str] = Field(
        ...,
        description="Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.",
        examples=[['732']],
        title='categoryIds',
    )
    externalId: Optional[str] = Field(
        None,
        description='Product reference unique identifier number in the store.',
        examples=['sandboxintegracao-310117347'],
        title='externalId',
    )
    id: Optional[str] = Field(
        None,
        description="Product's unique identifier number.",
        examples=['189371'],
        title='id',
    )
    images: List[Image] = Field(
        ...,
        description='Information of the images of the product.',
        examples=[
            [
                {
                    'alt': 'imagem',
                    'id': 'vtex_logo.jpg',
                    'url': 'https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg',
                }
            ]
        ],
        title='images',
    )
    name: str = Field(
        ...,
        description='Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.',
        examples=['Camiseta VTEX 10'],
        title='name',
    )
    origin: str = Field(
        ...,
        description='Origin account of the product. It is not possible to alter products where the origin is `marketplace`.',
        examples=['vtxleo7778'],
        title='origin',
    )
    skus: List[Sku4] = Field(
        ...,
        description='SKUs of the product.',
        examples=[
            [
                {
                    'dimensions': {'height': 2.1, 'length': 1.6, 'width': 1.5},
                    'ean': '978-1909621862',
                    'externalId': '1909621862',
                    'id': '182907',
                    'images': ['vtex_logo.jpg'],
                    'isActive': True,
                    'manufacturerCode': '1234567',
                    'name': 'VTEX Shirt Black Size S',
                    'specs': [
                        {'name': 'Color', 'value': 'Black'},
                        {'name': 'Size', 'value': 'S'},
                    ],
                    'weight': 300,
                },
                {
                    'dimensions': {'height': 2.1, 'length': 1.6, 'width': 1.5},
                    'ean': '978-1909621862',
                    'externalId': '1909621862',
                    'id': '182908',
                    'images': ['vtex_logo.jpg'],
                    'isActive': True,
                    'manufacturerCode': '1234568',
                    'name': 'VTEX Shirt White Size L',
                    'specs': [
                        {'name': 'Color', 'value': 'White'},
                        {'name': 'Size', 'value': 'L'},
                    ],
                    'weight': 300,
                },
            ]
        ],
        title='skus',
    )
    slug: str = Field(
        ...,
        description='Reference of the product in the URL of the store.',
        examples=['/vtex-shirt'],
        title='slug',
    )
    specs: List[Spec9] = Field(
        ...,
        description='Specifications that will differentiate the possible product SKUs.',
        examples=[
            [
                {'name': 'Color', 'values': ['Black', 'White']},
                {'name': 'Size', 'values': ['S', 'M', 'L']},
            ]
        ],
        title='specs',
    )
    status: str = Field(
        ...,
        description='Status of the product. Its values can be `active` or `inactive`.',
        examples=['active'],
        title='status',
    )
    taxCode: Optional[str] = Field(
        None, description='Product tax code.', examples=['123'], title='taxCode'
    )
    transportModal: Optional[str] = Field(
        None,
        description='Transport modal of the product.',
        examples=['1'],
        title='transportModal',
    )


class ApiCatalogSellerPortalProductsProductIdDescriptionGetResponse(BaseModel):
    createdAt: str = Field(
        ...,
        description='Date when the brand was created.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='createdAt',
    )
    productId: str = Field(
        ...,
        description="Product's unique identifier number.",
        examples=['61'],
        title='id',
    )
    updatedAt: str = Field(
        ...,
        description='Last date when the brand was updated.',
        examples=['2021-01-18T14:41:45.696488+00:00'],
        title='updatedAt',
    )


class ApiCatalogSellerPortalProductsProductIdDescriptionPutRequest(BaseModel):
    description: str = Field(
        ...,
        description='Product description.',
        examples=['White shirt.'],
        title='description',
    )
    productId: str = Field(
        ...,
        description="Product's unique identifier number.",
        examples=['71'],
        title='productId',
    )


class FieldMetadata1(BaseModel):
    from_: Optional[int] = Field(
        None,
        alias='from',
        description='The first page of the interval of the SKU list.',
    )
    to: Optional[int] = Field(
        None, description='The last page of the interval of the SKU list.'
    )
    total: Optional[int] = Field(None, description='Total of SKUs on the list.')


class Datum1(BaseModel):
    externalId: Optional[str] = Field(
        None,
        description='Unique identifier number of the association of the SKU with a Franchise Account.',
    )
    id: Optional[str] = Field(None, description='SKU unique identifier number.')
    productId: Optional[str] = Field(
        None, description='Product unique identifier number.'
    )


class ApiCatalogSellerPortalSkusSearchGetResponse(BaseModel):
    field_metadata: Optional[FieldMetadata1] = Field(
        None,
        alias='_metadata',
        description='Information about the organization and exhibition of the SKU list.',
    )
    data: Optional[List[Datum1]] = Field(
        None, description='List with information about the SKU.'
    )


class ApiCatalogSellerPortalSkusIdsGetResponse(BaseModel):
    field_metadata: Optional[FieldMetadata1] = Field(
        None,
        alias='_metadata',
        description='Information about the organization and exhibition of the SKU list.',
    )
    data: Optional[List[str]] = Field(
        None, description='List with information about the SKU.'
    )
